package org.altervista.zhen.MusicalElements;

import static org.altervista.zhen.MusicalElements.Pitch.BasePitch.*;

/**
 * Contains all supported Key Signatures
 */
public enum KeySignature
{
	C_MAJOR(true, 0),
	G_MAJOR(true, 1),
	D_MAJOR(true, 2),
	A_MAJOR(true, 3),
	E_MAJOR(true, 4),
	B_MAJOR(true, 5),
	F_SHARP_MAJOR(true, 6),
	C_SHARP_MAJOR(true, 7),
	F_MAJOR(true, -1),
	B_FLAT_MAJOR(true, -2),
	E_FLAT_MAJOR(true, -3),
	A_FLAT_MAJOR(true, -4),
	D_FLAT_MAJOR(true, -5),
	G_FLAT_MAJOR(true, -6),
	C_FLAT_MAJOR(true, -7),
	A_MINOR(false, 0),
	E_MINOR(false, 1),
	B_MINOR(false, 2),
	F_SHARP_MINOR(false, 3),
	C_SHARP_MINOR(false, 4),
	G_SHARP_MINOR(false, 5),
	D_SHARP_MINOR(false, 6),
	A_SHARP_MINOR(false, 7),
	D_MINOR(false, -1),
	G_MINOR(false, -2),
	C_MINOR(false, -3),
	F_MINOR(false, -4),
	B_FLAT_MINOR(false, -5),
	E_FLAT_MINOR(false, -6),
	A_FLAT_MINOR(false, -7);

	public final boolean isMajor;//true if KS is Major, false if Minor
	public final int numOfAccidentals; //positive for sharps, negative for flats, use for musicXML compliance
	KeySignature(boolean major, int accidentals)
	{
		isMajor = major;
		numOfAccidentals = accidentals;
	}

	public Pitch.BasePitch getPitchBasedOnScaleDegree(Pitch.ScaleDegree scaleDegree)
	{
		switch (this)
		{
			case C_FLAT_MAJOR:
				throw new UnsupportedOperationException("Zhen was too lazy to make this method work w/ non-AP key signatures");
			case C_MAJOR:
			case C_MINOR:
				switch (scaleDegree)
				{
					case ONE_FLAT:
						return C_FLAT;
					case ONE:
						return C;
					case ONE_SHARP:
						return C_SHARP;
					case TWO_FLAT:
						return D_FLAT;
					case TWO:
						return D;
					case TWO_SHARP:
						return D_SHARP;
					case THREE_FLAT:
						return E_FLAT;
					case THREE:
						return E;
					case THREE_SHARP:
						return E_SHARP;
					case FOUR_FLAT:
						return F_FLAT;
					case FOUR:
						return F;
					case FOUR_SHARP:
						return F_SHARP;
					case FIVE_FLAT:
						return G_FLAT;
					case FIVE:
						return G;
					case FIVE_SHARP:
						return G_SHARP;
					case SIX_FLAT:
						return A_FLAT;
					case SIX:
						return A;
					case SIX_SHARP:
						return A_SHARP;
					case SEVEN_FLAT:
						return B_FLAT;
					case SEVEN:
						return B;
					case SEVEN_SHARP:
						return B_SHARP;
				}
			case C_SHARP_MAJOR:
			case C_SHARP_MINOR:
				switch (scaleDegree)
				{
					case ONE_FLAT:
						return C;
					case ONE:
						return C_SHARP;
					case ONE_SHARP:
						return D;
					case TWO_FLAT:
						return D;
					case TWO:
						return D_SHARP;
					case TWO_SHARP:
						return E;
					case THREE_FLAT:
						return E;
					case THREE:
						return E_SHARP;
					case THREE_SHARP:
						return F_SHARP;
					case FOUR_FLAT:
						return F;
					case FOUR:
						return F_SHARP;
					case FOUR_SHARP:
						return G;
					case FIVE_FLAT:
						return G;
					case FIVE:
						return G_SHARP;
					case FIVE_SHARP:
						return A;
					case SIX_FLAT:
						return A;
					case SIX:
						return A_SHARP;
					case SIX_SHARP:
						return B;
					case SEVEN_FLAT:
						return B;
					case SEVEN:
						return B_SHARP;
					case SEVEN_SHARP:
						return C_SHARP;
				}
			case D_FLAT_MAJOR:
				throw new UnsupportedOperationException("Zhen was too lazy to make this method work w/ non-AP key signatures");
			case D_MAJOR:
			case D_MINOR:
				switch (scaleDegree)
				{
					case ONE_FLAT:
						return D_FLAT;
					case ONE:
						return D;
					case ONE_SHARP:
						return D_SHARP;
					case TWO_FLAT:
						return E_FLAT;
					case TWO:
						return E;
					case TWO_SHARP:
						return E_SHARP;
					case THREE_FLAT:
						return F;
					case THREE:
						return F_SHARP;
					case THREE_SHARP:
						return G;
					case FOUR_FLAT:
						return G_FLAT;
					case FOUR:
						return G;
					case FOUR_SHARP:
						return G_SHARP;
					case FIVE_FLAT:
						return A_FLAT;
					case FIVE:
						return A;
					case FIVE_SHARP:
						return A_SHARP;
					case SIX_FLAT:
						return B_FLAT;
					case SIX:
						return B;
					case SIX_SHARP:
						return B_SHARP;
					case SEVEN_FLAT:
						return C;
					case SEVEN:
						return C_SHARP;
					case SEVEN_SHARP:
						return D;
				}
			case D_SHARP_MINOR:
				switch (scaleDegree)
				{
					case ONE_FLAT:
						return D;
					case ONE:
						return D_SHARP;
					case ONE_SHARP:
						return E;
					case TWO_FLAT:
						return E;
					case TWO:
						return E_SHARP;
					case TWO_SHARP:
						return F_SHARP;
					case THREE_FLAT:
						return F_SHARP;
					case THREE:
						return G;
					case THREE_SHARP:
						return G_SHARP;
					case FOUR_FLAT:
						return G;
					case FOUR:
						return G_SHARP;
					case FOUR_SHARP:
						return A;
					case FIVE_FLAT:
						return A;
					case FIVE:
						return A_SHARP;
					case FIVE_SHARP:
						return B;
					case SIX_FLAT:
						return B;
					case SIX:
						return B_SHARP;
					case SIX_SHARP:
						return C_SHARP;
					case SEVEN_FLAT:
						return C;
					case SEVEN:
						return C_SHARP;
					case SEVEN_SHARP:
						return D;
				}
			case E_FLAT_MAJOR:
			case E_FLAT_MINOR:
				switch (scaleDegree)
				{
					case ONE_FLAT:
						return D;
					case ONE:
						return E_FLAT;
					case ONE_SHARP:
						return E;
					case TWO_FLAT:
						return F_FLAT;
					case TWO:
						return F;
					case TWO_SHARP:
						return F_SHARP;
					case THREE_FLAT:
						return G_FLAT;
					case THREE:
						return G;
					case THREE_SHARP:
						return G_SHARP;
					case FOUR_FLAT:
						return G;
					case FOUR:
						return A_FLAT;
					case FOUR_SHARP:
						return A;
					case FIVE_FLAT:
						return A;
					case FIVE:
						return B_FLAT;
					case FIVE_SHARP:
						return B;
					case SIX_FLAT:
						return C_FLAT;
					case SIX:
						return C;
					case SIX_SHARP:
						return C_SHARP;
					case SEVEN_FLAT:
						return D_FLAT;
					case SEVEN:
						return D;
					case SEVEN_SHARP:
						return D_SHARP;
				}
			case E_MAJOR:
			case E_MINOR:
				switch (scaleDegree)
				{
					case ONE_FLAT:
						return E_FLAT;
					case ONE:
						return E;
					case ONE_SHARP:
						return E_SHARP;
					case TWO_FLAT:
						return F;
					case TWO:
						return F_SHARP;
					case TWO_SHARP:
						return G;
					case THREE_FLAT:
						return G;
					case THREE:
						return G_SHARP;
					case THREE_SHARP:
						return A;
					case FOUR_FLAT:
						return A_FLAT;
					case FOUR:
						return A;
					case FOUR_SHARP:
						return A_SHARP;
					case FIVE_FLAT:
						return B_FLAT;
					case FIVE:
						return B;
					case FIVE_SHARP:
						return B_SHARP;
					case SIX_FLAT:
						return C;
					case SIX:
						return C_SHARP;
					case SIX_SHARP:
						return D;
					case SEVEN_FLAT:
						return D;
					case SEVEN:
						return D_SHARP;
					case SEVEN_SHARP:
						return E;
				}
			case F_MAJOR:
			case F_MINOR:
				switch (scaleDegree)
				{
					case ONE_FLAT:
						return F_FLAT;
					case ONE:
						return F;
					case ONE_SHARP:
						return F_SHARP;
					case TWO_FLAT:
						return G_FLAT;
					case TWO:
						return G;
					case TWO_SHARP:
						return G_SHARP;
					case THREE_FLAT:
						return A_FLAT;
					case THREE:
						return A;
					case THREE_SHARP:
						return A_SHARP;
					case FOUR_FLAT:
						return A;
					case FOUR:
						return B_FLAT;
					case FOUR_SHARP:
						return B;
					case FIVE_FLAT:
						return C_FLAT;
					case FIVE:
						return C;
					case FIVE_SHARP:
						return C_SHARP;
					case SIX_FLAT:
						return D_FLAT;
					case SIX:
						return D;
					case SIX_SHARP:
						return D_SHARP;
					case SEVEN_FLAT:
						return E_FLAT;
					case SEVEN:
						return E;
					case SEVEN_SHARP:
						return E_SHARP;
				}
			case F_SHARP_MAJOR:
			case F_SHARP_MINOR:
				switch (scaleDegree)
				{
					case ONE_FLAT:
						return F;
					case ONE:
						return F_SHARP;
					case ONE_SHARP:
						return G;
					case TWO_FLAT:
						return G;
					case TWO:
						return G_SHARP;
					case TWO_SHARP:
						return A;
					case THREE_FLAT:
						return A;
					case THREE:
						return A_SHARP;
					case THREE_SHARP:
						return B;
					case FOUR_FLAT:
						return B_FLAT;
					case FOUR:
						return B;
					case FOUR_SHARP:
						return B_SHARP;
					case FIVE_FLAT:
						return C;
					case FIVE:
						return C_SHARP;
					case FIVE_SHARP:
						return D;
					case SIX_FLAT:
						return D;
					case SIX:
						return D_SHARP;
					case SIX_SHARP:
						return E;
					case SEVEN_FLAT:
						return E;
					case SEVEN:
						return E_SHARP;
					case SEVEN_SHARP:
						return F;
				}
			case G_FLAT_MAJOR:
				switch (scaleDegree)
				{
					case ONE_FLAT:
						return F;
					case ONE:
						return G_FLAT;
					case ONE_SHARP:
						return G;
					case TWO_FLAT:
						return G;
					case TWO:
						return A_FLAT;
					case TWO_SHARP:
						return A;
					case THREE_FLAT:
						return A;
					case THREE:
						return B_FLAT;
					case THREE_SHARP:
						return B;
					case FOUR_FLAT:
						return B_FLAT;
					case FOUR:
						return C_FLAT;
					case FOUR_SHARP:
						return C;
					case FIVE_FLAT:
						return C;
					case FIVE:
						return D_FLAT;
					case FIVE_SHARP:
						return D;
					case SIX_FLAT:
						return D;
					case SIX:
						return E_FLAT;
					case SIX_SHARP:
						return E;
					case SEVEN_FLAT:
						return F_FLAT;
					case SEVEN:
						return F;
					case SEVEN_SHARP:
						return F_SHARP;
				}
			case G_MAJOR:
			case G_MINOR:
				switch (scaleDegree)
				{
					case ONE_FLAT:
						return G_FLAT;
					case ONE:
						return G;
					case ONE_SHARP:
						return G_SHARP;
					case TWO_FLAT:
						return A_FLAT;
					case TWO:
						return A;
					case TWO_SHARP:
						return A_SHARP;
					case THREE_FLAT:
						return B_FLAT;
					case THREE:
						return B;
					case THREE_SHARP:
						return B_SHARP;
					case FOUR_FLAT:
						return C_FLAT;
					case FOUR:
						return C;
					case FOUR_SHARP:
						return C_SHARP;
					case FIVE_FLAT:
						return D_FLAT;
					case FIVE:
						return D;
					case FIVE_SHARP:
						return D_SHARP;
					case SIX_FLAT:
						return E_FLAT;
					case SIX:
						return E;
					case SIX_SHARP:
						return E_SHARP;
					case SEVEN_FLAT:
						return F;
					case SEVEN:
						return F_SHARP;
					case SEVEN_SHARP:
						return G;
				}
			case G_SHARP_MINOR:
				throw new UnsupportedOperationException("Zhen was too lazy to make this method work w/ non-AP key signatures");
			case A_FLAT_MAJOR:
			case A_FLAT_MINOR:
				switch (scaleDegree)
				{
					case ONE_FLAT:
						return G;
					case ONE:
						return A_FLAT;
					case ONE_SHARP:
						return A;
					case TWO_FLAT:
						return A;
					case TWO:
						return B_FLAT;
					case TWO_SHARP:
						return B;
					case THREE_FLAT:
						return C_FLAT;
					case THREE:
						return C;
					case THREE_SHARP:
						return C_SHARP;
					case FOUR_FLAT:
						return C;
					case FOUR:
						return D_FLAT;
					case FOUR_SHARP:
						return D;
					case FIVE_FLAT:
						return D;
					case FIVE:
						return E_FLAT;
					case FIVE_SHARP:
						return E;
					case SIX_FLAT:
						return F_FLAT;
					case SIX:
						return F;
					case SIX_SHARP:
						return F_SHARP;
					case SEVEN_FLAT:
						return G_FLAT;
					case SEVEN:
						return G;
					case SEVEN_SHARP:
						return G_SHARP;
				}
			case A_MAJOR:
			case A_MINOR:
				switch (scaleDegree)
				{
					case ONE_FLAT:
						return A_FLAT;
					case ONE:
						return A;
					case ONE_SHARP:
						return A_SHARP;
					case TWO_FLAT:
						return B_FLAT;
					case TWO:
						return B;
					case TWO_SHARP:
						return B_SHARP;
					case THREE_FLAT:
						return C;
					case THREE:
						return C_SHARP;
					case THREE_SHARP:
						return D;
					case FOUR_FLAT:
						return D_FLAT;
					case FOUR:
						return D;
					case FOUR_SHARP:
						return D_SHARP;
					case FIVE_FLAT:
						return E_FLAT;
					case FIVE:
						return E;
					case FIVE_SHARP:
						return E_SHARP;
					case SIX_FLAT:
						return F;
					case SIX:
						return F_SHARP;
					case SIX_SHARP:
						return G;
					case SEVEN_FLAT:
						return G;
					case SEVEN:
						return G_SHARP;
					case SEVEN_SHARP:
						return A;
				}
			case A_SHARP_MINOR:
				throw new UnsupportedOperationException("Zhen was too lazy to make this method work w/ non-AP key signatures");
			case B_FLAT_MAJOR:
			case B_FLAT_MINOR:
				switch (scaleDegree)
				{
					case ONE_FLAT:
						return A;
					case ONE:
						return B_FLAT;
					case ONE_SHARP:
						return B;
					case TWO_FLAT:
						return C_FLAT;
					case TWO:
						return C;
					case TWO_SHARP:
						return C_SHARP;
					case THREE_FLAT:
						return D_FLAT;
					case THREE:
						return D;
					case THREE_SHARP:
						return D_SHARP;
					case FOUR_FLAT:
						return D;
					case FOUR:
						return E_FLAT;
					case FOUR_SHARP:
						return E;
					case FIVE_FLAT:
						return F_FLAT;
					case FIVE:
						return F;
					case FIVE_SHARP:
						return F_SHARP;
					case SIX_FLAT:
						return G_FLAT;
					case SIX:
						return G;
					case SIX_SHARP:
						return G_SHARP;
					case SEVEN_FLAT:
						return A_FLAT;
					case SEVEN:
						return A;
					case SEVEN_SHARP:
						return B_SHARP;
				}
			case B_MAJOR:
			case B_MINOR:
				switch (scaleDegree)
				{
					case ONE_FLAT:
						return B_FLAT;
					case ONE:
						return B;
					case ONE_SHARP:
						return B_SHARP;
					case TWO_FLAT:
						return C;
					case TWO:
						return C_SHARP;
					case TWO_SHARP:
						return D;
					case THREE_FLAT:
						return D;
					case THREE:
						return D_SHARP;
					case THREE_SHARP:
						return E;
					case FOUR_FLAT:
						return E_FLAT;
					case FOUR:
						return E;
					case FOUR_SHARP:
						return E_SHARP;
					case FIVE_FLAT:
						return F;
					case FIVE:
						return F_SHARP;
					case FIVE_SHARP:
						return G;
					case SIX_FLAT:
						return G;
					case SIX:
						return G_SHARP;
					case SIX_SHARP:
						return A;
					case SEVEN_FLAT:
						return A;
					case SEVEN:
						return A_SHARP;
					case SEVEN_SHARP:
						return B;
				}
			default:
				throw new RuntimeException("Did you forget to include a KeySignature in the getPitchBasedOnScaleDegree() method?");
		}
	}
}